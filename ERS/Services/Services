using DataAccess;

namespace Servcices
{
    
// 
public class Ticket
{

    Queue<int> AllTickets = new Queue<int>();

    // Need to overload the constructor to change for process ticket method to have less parameters needed
    public Ticket(string amount, string description, string submitDate, string expenseDate, int status)
    {
    
    }

    //Ticket example = new Ticket();

    // Method to submit a ticket, which returns a unique ID
    public static int SubmitTicket(string amount, string description, string submitDate, string expenseDate, int status)
    {
        Ticket a = new Ticket(amount, description, submitDate, expenseDate, status = 1);
        Random Random = new Random();
        int ticketID = Random.Next(0, int.MaxValue);
        a.AllTickets.Enqueue(ticketID);
        
        return ticketID;
    }
    
    // Employee View Submitted Ticket Method
    public static void viewTicketStatus(int ticketID, int status)
    {
        switch (status)
        {
            case 1:
                    System.Console.WriteLine("Ticket Status: Pending");
            break;
            case 2: 
                    System.Console.WriteLine("Ticket Status: Approved");
            break;
            case 3:
                    System.Console.WriteLine("Ticket Status: Denied");
            break;
                
        }

    }
    // Manager Processing Ticket Method

public class ManagerBehaviors
{

    public bool CheckManager(bool IsManager)
    {
        if (IsManager)
        {
            System.Console.WriteLine("");
        }
    }

    static string ProcessTicket(bool IsManager, bool approveDeny)
    {

        if (IsManager == true)
        {
            approveDeny = true;
            Console.WriteLine("Ticket approved!");

        } else 
        {
            Console.WriteLine("Please enter Manager password if you are a manager.");
            string mPass = Console.ReadLine()!.Trim().ToLower();
            for (int i = 0; i < AllManagers)
            if (mPass == )
            mPass.ToObject CheckManager(IsManager);
        }
        
    }

}

public class LoginRegister
{
    HashSet<string> allUsernames = new HashSet<string>();
    HashSet<string> allPasswords = new HashSet<string>();
    public string LoginMethod(string usernameLogin, string passwordLogin)
    {
        bool? invalidInput;
        

          foreach (string str in allUsernames)
                {
                    foreach (string pwstr in allPasswords)
                    {
                    
                        if (!usernameLogin.Equals(str) || !passwordLogin.Equals(pwstr))
                        {
                        invalidInput = true;
                        Console.WriteLine("Not a valid username or password.");
                        }
                        else
                        {
                            invalidInput = false;
                        HashCode.Combine(passwordLogin);
                        allPasswords.Add(passwordLogin);
                        System.Console.WriteLine("Welcome Back!");
                        }
                    }
                }
        return "Welcome back!";
    }

     public static void RegisterUser(string usernameRegister, string passwordRegister)
    {
        HashSet<string> allUsernames = new HashSet<string>();
        HashSet<string> allPasswords = new HashSet<string>();

         if (usernameRegister.Length > 1 && usernameRegister.Length < 8)
                {
                allUsernames.Add(usernameRegister);
                
  
            if (passwordRegister.Length > 6 || passwordRegister.Length < 10)
            {
                HashCode.Combine(passwordRegister);
                allPasswords.Add(passwordRegister);
            }
            else
            {
                System.Console.WriteLine("Invalid password, please enter a pwassword between 6-10 characters.");
            }
            
    }
}
}
}
}
